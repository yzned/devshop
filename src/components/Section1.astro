---
import Chevron from "@assets/chevron.svg";
import LiquidGlassCard from "./LiquidGlassCard.astro";

const items = [
    "MVP for hackathon",
    "Product redesign",
    "Wallet integration",
    "NFT mint flow",
    "Full product development",
    "DAO tools",
    "AI integrations",
];
---

<div>
    <div class="w-full relative overflow-hidden bg-black">
        <p
            class="opacity-40 absolute text-[18px] z-50 lg:text-[1.1vw] text-white w-full text-center top-[6%]"
        >
            null.face
        </p>

        <div class="relative w-full h-[600px] lg:h-fit">
            <img
                src="/assets/person-header.png"
                class="w-full relative z-0 lg:block hidden"
            />

            <img
                src="/assets/person-header-mobile.png"
                class="min-w-[1024px] absolute z-0 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 lg:hidden block"
            />

            <div
                class="fade-in absolute left-0 right-0 top-[220px] lg:top-1/4 -translate-y-1/2 lg:inline-flex hidden
                   flex-nowrap overflow-hidden z-10"
            >
                <div id="scrolling-text" class="flex font-[600]">
                    <p
                        class="text-main-white uppercase whitespace-nowrap text-[28px] lg:text-[5vw] mr-8"
                    >
                        Move in silence Deploy at scale Move in silence Deploy
                        at scale
                    </p>
                    <p
                        class="text-main-white uppercase whitespace-nowrap text-[28px] lg:text-[5vw] mr-8"
                    >
                        Move in silence Deploy at scale Move in silence Deploy
                        at scale
                    </p>
                </div>
            </div>

            <div
                class="fade-in absolute left-0 right-0 top-[220px] lg:top-1/4 -translate-y-1/2 lg:hidden
               flex-nowrap overflow-hidden inline-flex z-10"
            >
                <div class="flex font-[600] marquee enable-animation">
                    <p
                        class="text-main-white uppercase whitespace-nowrap text-[28px] lg:text-[5vw] marquee__content"
                    >
                        Move in silence Deploy at scale Move in silence Deploy
                        at scale
                    </p>
                    <p
                        class="text-main-white uppercase whitespace-nowrap text-[28px] lg:text-[5vw] marquee__content"
                    >
                        Move in silence Deploy at scale Move in silence Deploy
                        at scale
                    </p>
                </div>
            </div>

            <img
                src="/assets/person-without-bg.png"
                class="w-full absolute z-20 -top-[30.5%] -left-[2.4%] -rotate-[4.7deg] fade-in-without-move lg:block hidden"
            />
            <img
                src="/assets/person-without-bg.png"
                class="min-w-[1024px] absolute z-20 top-1/2 left-1/2 transform -translate-x-[532px] -translate-y-1/2 -rotate-[5deg] lg:hidden block"
            />
        </div>

        <section
            class="absolute z-50 left-0 top-[75%] w-full overflow-hidden lg:block hidden"
        >
            <div class="flex justify-center">
                <div
                    id="scrolling-cards"
                    class="flex gap-4 marquee-container"
                    style="will-change: transform;"
                >
                    {
                        Array(5)
                            .fill(null)
                            .map(() => (
                                <div class="card-copy inline-flex gap-4">
                                    {items.map((item) => (
                                        <LiquidGlassCard label={item} />
                                    ))}
                                </div>
                            ))
                    }
                </div>
            </div>
        </section>

        <section
            class="absolute z-50 left-0 top-[75%] w-full overflow-hidden lg:hidden block"
        >
            <div class="flex justify-center">
                <div class="marquee enable-animation-reverse">
                    <ul class="marquee__content">
                        {items.map((item) => <LiquidGlassCard label={item} />)}
                    </ul>

                    <ul class="marquee__content" aria-hidden="true">
                        {items.map((item) => <LiquidGlassCard label={item} />)}
                    </ul>
                </div>
            </div>
        </section>

        <div
            class="fade-in hidden lg:block absolute z-50 text-[1vw] text-[#6E677D] opacity-40 w-full text-center bottom-[4%]"
        >
            <p>
                A senior dev team with 6+ years <br />of experience in crypto,
                Web3, and AI
            </p>
            <div class="text-center flex justify-center mt-4">
                <Chevron />
            </div>
        </div>
    </div>

    <div
        class="fade-in z-50 text-[14px] text-[#6E677D] opacity-40 w-full text-center mt-6 block lg:hidden"
    >
        <p>
            A senior dev team with 6+ years <br />of experience in crypto, Web3,
            and AI
        </p>
        <div class="text-center flex justify-center mt-4">
            <Chevron />
        </div>
    </div>
</div>

<style>
    #scrolling-cards,
    .card-copy {
        backface-visibility: hidden;
        transform: translateZ(0);
        will-change: transform;
    }

    .card-copy {
        flex: none;
    }
    .marquee {
        --gap: 1rem;
        display: flex;
        overflow: hidden;
        user-select: none;
        gap: var(--gap);
    }

    .marquee--reverse .marquee__content {
        animation-direction: reverse;
    }

    .marquee__content {
        flex-shrink: 0;
        display: flex;
        justify-content: space-around;
        min-width: 100%;
        gap: var(--gap);
    }

    .enable-animation .marquee__content {
        animation: scroll 10s linear infinite;
    }

    .enable-animation-reverse .marquee__content {
        animation: scroll 10s linear infinite reverse;
    }

    @keyframes scroll {
        from {
            transform: translateX(0);
        }
        to {
            transform: translateX(calc(-100% - var(--gap)));
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add("visible");
                        observer.unobserve(entry.target);
                    }
                });
            },
            {
                threshold: 0.1,
                rootMargin: "0px 0px -100px 0px",
            },
        );

        document
            .querySelectorAll(".fade-in, .fade-in-without-move")
            .forEach((el) => observer.observe(el));
    });

    document.addEventListener("DOMContentLoaded", () => {
        const scrollingText = document.getElementById("scrolling-text");
        const scrollingCards = document.getElementById("scrolling-cards");
        const cardCopies = document.querySelectorAll(".card-copy");

        let textWidth = 0;
        let cardsWidth = 0;
        const baseSpeed = 1;
        let textSpeed = baseSpeed;
        let cardsSpeed = baseSpeed;

        let textDirection = -1;
        let cardsDirection = 1;

        let lastScrollY = window.scrollY;
        let textX = 0;
        let cardsX = 0;

        let isScrolling = false;
        let decayTimeout;

        function getCopyWidth() {
            const firstCopy = cardCopies[0];
            return firstCopy ? firstCopy.scrollWidth : 0;
        }

        function waitForWidth() {
            return new Promise((resolve) => {
                const check = () => {
                    const width = getCopyWidth();
                    if (width > 0) {
                        resolve(width);
                    } else {
                        requestAnimationFrame(check);
                    }
                };
                check();
            });
        }

        async function initWidths() {
            textWidth = scrollingText.scrollWidth / 2;
            cardsWidth = await waitForWidth();
            updateTextPosition();
            updateCardsPosition();
        }

        function updateTextPosition() {
            if (!isScrolling && textSpeed > baseSpeed) {
                textSpeed -= (textSpeed - baseSpeed) * 0.1;
                if (Math.abs(textSpeed - baseSpeed) < 0.01) {
                    textSpeed = baseSpeed;
                }
            }

            textX += textSpeed * textDirection;

            if (textDirection < 0 && -textX >= textWidth) {
                textX += textWidth;
            } else if (textDirection > 0 && textX >= 0) {
                textX -= textWidth;
            }

            scrollingText.style.transform = `translateX(${textX}px)`;
            requestAnimationFrame(updateTextPosition);
        }

        function updateCardsPosition() {
            if (cardsWidth === 0) {
                requestAnimationFrame(updateCardsPosition);
                return;
            }

            if (!isScrolling && cardsSpeed > baseSpeed) {
                cardsSpeed -= (cardsSpeed - baseSpeed) * 0.1;
                if (Math.abs(cardsSpeed - baseSpeed) < 0.01) {
                    cardsSpeed = baseSpeed;
                }
            }

            cardsX += cardsSpeed * cardsDirection;

            if (cardsDirection < 0 && -cardsX >= cardsWidth) {
                cardsX += cardsWidth;
            } else if (cardsDirection > 0 && cardsX >= 0) {
                cardsX -= cardsWidth; // Плавный переход
            }

            scrollingCards.style.transform = `translateX(${cardsX}px)`;
            requestAnimationFrame(updateCardsPosition);
        }

        window.addEventListener("scroll", () => {
            const scrollY = window.scrollY;
            const delta = scrollY - lastScrollY;
            lastScrollY = scrollY;

            clearTimeout(decayTimeout);
            isScrolling = true;

            if (delta > 0) {
                textDirection = -1;
                cardsDirection = 1;
                textSpeed = Math.min(baseSpeed + delta / 8, 15);
                cardsSpeed = Math.min(baseSpeed + delta / 8, 15);
            } else if (delta < 0) {
                textDirection = 1;
                cardsDirection = -1;
                textSpeed = Math.min(baseSpeed + Math.abs(delta) / 8, 15);
                cardsSpeed = Math.min(baseSpeed + Math.abs(delta) / 8, 15);
            }

            decayTimeout = setTimeout(() => {
                isScrolling = false;
            }, 100);
        });

        window.addEventListener("resize", () => {
            textWidth = scrollingText.scrollWidth / 2;
            if (cardCopies.length > 0) {
                cardsWidth = getCopyWidth();
            }
        });

        initWidths();
    });
</script>
